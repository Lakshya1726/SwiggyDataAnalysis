# -*- coding: utf-8 -*-
"""SwiggyDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZFpvLGqu1OIlHQ6I7up5kqFYQfE3EN4L
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans

# Load data
data_path = 'Swiggy.csv'
data = pd.read_csv(data_path)

# Display initial data info
print("Initial Data Info:\n", data.info())
print("\nFirst 5 rows of data:\n", data.head())

# Data Cleaning
print("\nChecking for missing values:\n", data.isnull().sum())
data.fillna(method='ffill', inplace=True)

# Exploratory Data Analysis
print("\nSummary Statistics:\n", data.describe(include='all'))

# Visualizations
plt.figure(figsize=(10, 6))
sns.countplot(x='Cuisine', data=data, order=data['Cuisine'].value_counts().index[:10])
plt.title('Top 10 Cuisines')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
data['Rating'] = pd.to_numeric(data['Rating'], errors='coerce')  # Ensure numeric type for Rating
sns.histplot(data['Rating'].dropna(), bins=20, kde=True)
plt.title('Rating Distribution')
plt.show()

# Encoding categorical features
le = LabelEncoder()
for col in data.select_dtypes(include=['object']).columns:
    data[col] = le.fit_transform(data[col].astype(str))

# Check correlations
correlation_matrix = data.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Clustering (K-Means)
filtered_data = data[['Cost_for_Two', 'Rating']].dropna()  # Drop rows with NaN in the relevant columns
data.loc[filtered_data.index, 'Cluster'] = KMeans(n_clusters=3, random_state=42).fit_predict(filtered_data)

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Cost_for_Two', y='Rating', hue='Cluster', data=data, palette='viridis')
plt.title('K-Means Clustering of Cost and Rating')
plt.show()

# Machine Learning (Predicting Rating)
# Preparing data
data = data.dropna(subset=['Rating'])  # Ensure no NaN values in the target
features = data.drop(columns=['Rating'], axis=1).select_dtypes(include=['number'])
target = data['Rating']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Model Training
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Predictions and Evaluation
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Feature Importance
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': features.columns, 'Importance': importances})
feature_importance_df.sort_values(by='Importance', ascending=False, inplace=True)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importance')
plt.show()

# Save processed data
processed_data_path = 'processed_swiggy_data.csv'
data.to_csv(processed_data_path, index=False)
print(f"Processed data saved to {processed_data_path}")

